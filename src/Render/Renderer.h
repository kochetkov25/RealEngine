#pragma once

#include <glad/glad.h>

#include "VertexArray.h"

#include <vector>
#include <string>

static const size_t MAX_ELEMENTS = 1024 * 2;

namespace Render {

	class Renderer
	{
	public:
		/*тип отрисовываемых примитивов*/
		enum class State
		{
			TEXTURE_2D,
			PRIMITIVES_GL,
			TEXTURE_2D_LIGHT
		};

		/*конструктор*/
		Renderer()
		{
			_elementsBuff.reserve(MAX_ELEMENTS);
			_currMode = GL_TRIANGLES;
			_vertexCount = 0;
			_renderState = State::PRIMITIVES_GL;
		}
		/*добавление в буффер вершины из трех координат*/
		template<typename _T>
		void verex3(_T x, _T y, _T z)
		{
			_elementsBuff.emplace_back(static_cast<float>(x));
			_elementsBuff.emplace_back(static_cast<float>(y));
			_elementsBuff.emplace_back(static_cast<float>(z));

			_vertexCount++;
		}

		/*добавление в буффер цвета для вершины в формате RGBA (от 0 до 255)*/
		template<typename _T>
		void color4(_T r, _T g, _T b, _T a = 1.f)
		{
			_elementsBuff.emplace_back(static_cast<float>(r) / 255.f);
			_elementsBuff.emplace_back(static_cast<float>(g) / 255.f);
			_elementsBuff.emplace_back(static_cast<float>(b) / 255.f);
			_elementsBuff.emplace_back(static_cast<float>(a));
		}

		/*добавлене в буффер вершинй спрайта (от 0 до 1)*/
		template<typename _T>
		void vertexUV(_T U, _T V)
		{
			_elementsBuff.emplace_back(static_cast<float>(U));
			_elementsBuff.emplace_back(static_cast<float>(V));
		}

		/*начать задание примитивов*/
		void begin(GLenum mode);

		/*закончить задание примитивов*/
		void end();

		/*отрисовать все вершины*/
		void drawArrays();

		void Enable(State currState);
	private:
		/*буффер под вершины и цвета*/
		std::vector<float> _elementsBuff;
		size_t _vertexCount;
		/*тип элементов в буффере для примитивов*/
		std::vector<VertexBuffer::BufferElement> _vec3Col4 = {
															   VertexBuffer::_e_DataType::Float3,
															   VertexBuffer::_e_DataType::Float4
		                                                     };
		/*тип элементов в буффере для спрайтов*/
		std::vector<VertexBuffer::BufferElement> _vec3UV2 = {
																VertexBuffer::_e_DataType::Float3,
																VertexBuffer::_e_DataType::Float2
															};
		/*тип элементов в буффере для спрайтов с освещением*/
		std::vector<VertexBuffer::BufferElement> _vec3UV2vec3 = {
																VertexBuffer::_e_DataType::Float3,
																VertexBuffer::_e_DataType::Float2,
																VertexBuffer::_e_DataType::Float3,
		                                                    };
		/*текущий режим отрисовки*/
		GLenum _currMode;

		/*ВАО*/
		VertexArray _VAO;

		/*парамемтр хранит тип отрисовываемого примитива*/
		State _renderState;
	};
}