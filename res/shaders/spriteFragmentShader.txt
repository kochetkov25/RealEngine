#version 440
out vec4 vertexColor;

in vec2 texCoords;
in vec3 texNormals;
in vec3 vertexPosWorld;

uniform sampler2D tex;

// uniform vec3 lightColor;
// uniform vec3 lightPos;
uniform vec3 cameraPos;

struct Light
{
   vec3  lightPos;
   vec3  lightColor;

   vec3  ambientFactor;
   vec3  diffuseFactor;
   vec3  specularFactor;
};

uniform Light light;

struct Material
{
   vec3  ambientFactor;
   vec3  diffuseFactor;
   vec3  specularFactor;
   float shininess;
};

uniform Material material;

void main() 
{
   // ambient
   vec3 ambient = material.ambientFactor * light.ambientFactor * light.lightColor;

   // diffuse
   vec3 normal = normalize(texNormals);
   vec3 lightDirection = normalize(light.lightPos - vertexPosWorld);
   vec3 diffuse =  material.diffuseFactor * light.diffuseFactor * light.lightColor * dot(normal, lightDirection);
   diffuse = max(diffuse, 0.0);

   // specular
   vec3 cameraDirection = normalize(cameraPos - vertexPosWorld);
   vec3 reflectDirection = reflect(-lightDirection, normal);
   float specularDot = pow(max(dot(cameraDirection, reflectDirection), 0.0), material.shininess);
   vec3 specular = material.specularFactor * light.specularFactor * specularDot * light.lightColor;

   vertexColor = texture(tex, texCoords) * vec4(ambient + diffuse + specular, 1.f);
}