#version 440
out vec4 vertexColor;

in vec2 texCoords;
in vec3 texNormals;
in vec3 vertexPosWorld;

uniform sampler2D tex;

uniform vec3 cameraPos;

struct Light
{
   vec3  lightPos;
   vec3  lightColor;

   vec3  ambientFactor;
   vec3  diffuseFactor;
   vec3  specularFactor;
};

uniform Light light;

struct Material
{
   sampler2D texture;

   sampler2D specularMap;
   sampler2D emissionMap;

   float shininess;
};

uniform Material material;

void main() 
{
   // ambient
   vec3 ambient = light.ambientFactor * vec3(texture(material.texture, texCoords)) * light.lightColor;

   // diffuse
   vec3 normal = normalize(texNormals);
   vec3 lightDirection = normalize(light.lightPos - vertexPosWorld);
   vec3 diffuse = light.diffuseFactor * vec3(texture(material.texture, texCoords)) * light.lightColor * dot(normal, lightDirection);
   diffuse = max(diffuse, 0.0);

   // specular
   vec3 cameraDirection = normalize(cameraPos - vertexPosWorld);
   vec3 reflectDirection = reflect(-lightDirection, normal);
   float specularDot = pow(max(dot(cameraDirection, reflectDirection), 0.0), material.shininess);
   vec3 specular = vec3(texture(material.specularMap, texCoords)) * light.specularFactor * specularDot * light.lightColor;

   // emission
   vec3 emission = texture(material.emissionMap, texCoords).rgb;

   vertexColor = vec4(ambient + diffuse + specular + emission, 1.f);
}